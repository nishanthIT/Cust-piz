// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password      String
  phone         String   @unique
  address       String
  orders        Order[]
  points        Decimal?  @default(0)
  created_at    DateTime @default(now())
}

model Admin {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password      String
  phone         String   @unique
  createdAt     DateTime @default(now())
}

model Pizza {
  id            String   @id @default(cuid())
  name          String
  description   String?
  imageUrl      String?
  sizes         Json
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id] )  
  defaultToppings DefaultToppings[] 
  defaultIngredients DefaultIngredients[]  
  createdAt    DateTime @default(now())
  orderItems    OrderItem[]
  comboPizzas   ComboPizza[]
}

model ComboOffers {
  id             String   @id @default(cuid())
  name           String
  description    String
  imageUrl       String
  discount      Decimal
  createdAt      DateTime @default(now())
  pizzas         ComboPizza[]   
}

model ComboPizza {
  id             String   @id @default(cuid())
  comboId        String
  pizzaId        String
  quantity       Int
  combo        ComboOffers @relation(fields: [comboId], references: [id], onDelete: Cascade)
  pizza         Pizza       @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
}

model Order {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  status        OrderStatus    @default(PENDING)
  totalAmount   Decimal
  orderItems    OrderItem[]
  createdAt     DateTime @default(now())
}

model OrderItem {
  id                  String   @id @default(cuid())
  orderId             String
  order               Order    @relation(fields: [orderId], references: [id])
  quantity            Int      //no.of pizzas
  size                String
  price               Decimal   
  orderToppings       OrderToppings[]   //user access
  orderIngredients    OrderIngredients[]  //user access
  pizzaId             String
  pizza               Pizza    @relation(fields: [pizzaId], references: [id])

}

model OrderToppings  {
  id            String   @id @default(cuid())
  name          String
  price         Decimal
  status        Boolean  //admin access
  include       Boolean  //user access
  quantity      Int
  oderItemId    String
  oderItem      OrderItem @relation(fields: [oderItemId], references: [id])
}


model OrderIngredients  {
  id                     String   @id @default(cuid())
  name                   String
  price                  Decimal
  status                 Boolean   //admin access
  include                Boolean   //user access
  quantity               Int
  orderItemId            String
  orderItem              OrderItem @relation(fields: [orderItemId], references: [id])
}

model DefaultToppings {
  id            String   @id @default(cuid())
  name          String
  price         Decimal
  quantity      Int
  include       Boolean
  pizzaId       String   
  pizza         Pizza    @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
  toppingId     String   // added now
  topping   ToppingsList @relation(fields: [toppingId], references: [id], onDelete: Cascade) // added now
}

model DefaultIngredients {
  id            String @id  @default(cuid())
  name          String
  price         Decimal
  quantity      Int
  include       Boolean
  pizzaId       String
  pizza         Pizza    @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
  ingredientId  String //added now
  ingredient    IngredientsList @relation(fields: [ingredientId], references: [id], onDelete: Cascade) // added now
}

model ToppingsList {
  id            String   @id @default(cuid())
  name          String
  price         Decimal
  status        Boolean  @default(true)
  defaultToppings DefaultToppings[] //added now
}

model IngredientsList {
  id            String   @id @default(cuid())
  name          String
  price         Decimal
  status        Boolean  @default(true)
  defaultIngredients DefaultIngredients[] //added now
}

model Category {
  id            String   @id @default(cuid())
  description   String?
  name          String
  pizzas        Pizza[]  
}


enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

enum PizzaSize {
  SMALL
  MEDIUM
  LARGE
}

